from __future__ import annotations

import os
import tempfile
import uuid

from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BotCommand,
    BotCommandScopeDefault,
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from core.config import settings
from core.db.unit_of_work import uow
from core.exceptions import InsufficientBalanceError, ServiceError
from core.services import (
    BillingService,
    ConfigService,
    ServerService,
    TelegramPayService,
    UserService,
)

from .states import CreateConfig, RenameConfig

router = Router()

user_service = UserService(uow)
server_service = ServerService(uow)
config_service = ConfigService(uow)
billing_service = BillingService(uow, per_config_cost=settings.per_config_cost)


async def get_or_create_user(tg_id: int, username: str | None):
    return await user_service.register(tg_id, username=username)


async def setup_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="topup", description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="how_to_use", description="–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN"),
        BotCommand(command="balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="configs", description="–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"),
        BotCommand(command="create_config", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())


@router.message(Command("start"))
async def cmd_start(message: Message):
    await get_or_create_user(message.from_user.id, message.from_user.username)
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ \u2014 10 —Ä—É–±–ª–µ–π (—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É). "
        "–î–∞–ª–µ–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 50 —Ä—É–±–ª–µ–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /create_config - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "‚Ä¢ /configs - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )
    await message.answer(welcome_text)


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìå <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ /topup - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ /configs - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ /create_config - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
        "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        "‚Ä¢ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ \u2014 10 —Ä—É–±–ª–µ–π (—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É)\n"
        "‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ \u2014 50 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü, —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é /balance\n"
        "2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /topup\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è /create_config\n"
        "4. –°–∫–∞—á–∞–π—Ç–µ .ovpn —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç\n"
        "5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /configs"
    )
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("how_to_use"))
async def cmd_how_to_use(message: Message):
    message = (
        "üîê <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN</b>\n"
        "\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –Ω—É–∂–Ω–æ:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç\n"
        "2. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OVPN-—Ñ–∞–π–ª (–°–æ–∑–¥–∞–π –µ–≥–æ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª)\n"
        "3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n"
        "\n"
        "‚Äî ‚Äî ‚Äî\n"
        "\n"
        "üñ• <b>Windows</b>\n"
        "1. –°–∫–∞—á–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ "
        "<a href=\"https://openvpn.net/client-connect-vpn-for-windows/\">OpenVPN Connect</a>\n"
        "2. –ó–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ <b>¬´+ Import Profile¬ª</b>\n"
        "3. –ù–∞–π–¥–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π <code>.ovpn</code>-—Ñ–∞–π–ª\n"
        "4. –í –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞–∂–º–∏ <b>Connect</b> ‚Äî –≥–æ—Ç–æ–≤–æ\n"
        "\n"
        "‚Äî ‚Äî ‚Äî\n"
        "\n"
        "üçè <b>macOS</b>\n"
        "1. –°–∫–∞—á–∞–π <a href=\"https://tunnelblick.net/\">Tunnelblick</a>\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –æ—Ç–∫—Ä–æ–π –µ–≥–æ\n"
        "3. –î–≤–∞–∂–¥—ã –∫–ª–∏–∫–Ω–∏ –Ω–∞ <code>.ovpn</code>-—Ñ–∞–π–ª ‚Üí ¬´–ò–º–ø–æ—Ä—Ç¬ª\n"
        "4. –ü–æ–¥–∫–ª—é—á–∞–π—Å—è —á–µ—Ä–µ–∑ –∏–∫–æ–Ω–∫—É Tunnelblick –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é\n"
        "\n"
        "‚Äî ‚Äî ‚Äî\n"
        "\n"
        "üì± <b>Android</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ "
        "<a href=\"https://play.google.com/store/apps/details?id=net.openvpn.openvpn\">OpenVPN Connect</a>\n"
        "2. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí <b>¬´File¬ª</b> ‚Üí –≤—ã–±–µ—Ä–∏ <code>.ovpn</code>\n"
        "3. –ù–∞–∂–º–∏ <b>Connect</b>\n"
        "\n"
        "‚Äî ‚Äî ‚Äî\n"
        "\n"
        "üì± <b>iPhone / iPad</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ "
        "<a href=\"https://apps.apple.com/app/openvpn-connect/id590379981\">OpenVPN Connect</a>\n"
        "2. –í Telegram –Ω–∞–∂–º–∏ –Ω–∞ <code>.ovpn</code> ‚Üí ¬´‚Ä¶¬ª ‚Üí <b>Share ‚Üí Copy to OpenVPN</b>\n"
        "3. –ù–∞–∂–º–∏ <b>Add</b> ‚Üí <b>Connect</b>\n"
        "\n"
        "‚Äî ‚Äî ‚Äî\n"
        "\n"
        "üí¨ –ü—Ä–æ–±–ª–µ–º—ã? –ü–∏—à–∏ @andriyshkoy ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!"
    )

    await message.answer(message, parse_mode="HTML")


@router.message(Command("balance"))
async def cmd_balance(message: Message):
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}")


@router.message(Command("topup"))
async def cmd_topup(message: Message):
    await get_or_create_user(message.from_user.id, message.from_user.username)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="\ud83d\udcb0 –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay:crypto"
                )
            ],
            [
                InlineKeyboardButton(
                    text="Telegram Pay (\u043a–∞—Ä—Ç–∞)",
                    callback_data="pay:telegram",
                )
            ],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=kb)


@router.callback_query(lambda c: c.data == "pay:crypto")
async def pay_crypto(callback: CallbackQuery):
    await callback.message.answer(
        "–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!"
    )
    await callback.answer()

AVAILABLE_AMOUNTS = [100, 200, 300, 500]


@router.callback_query(lambda c: c.data == "pay:telegram")
async def pay_telegram(callback: CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{amt} ‚ÇΩ", callback_data=f"topup:{amt}")]
            for amt in AVAILABLE_AMOUNTS
        ]
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("topup:"))
async def got_topup_amount(callback: CallbackQuery, bot: Bot):
    try:
        amount = float(callback.data.split(":")[1])
        assert amount in AVAILABLE_AMOUNTS
    except (ValueError, AssertionError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
        return

    service = TelegramPayService(bot, settings.telegram_pay_token)
    await service.send_invoice(callback.message.chat.id, amount)


@router.message(Command("configs"))
async def cmd_configs(message: Message):
    """List all configs (active and suspended) with inline buttons."""
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    active = await config_service.list_active(owner_id=user.id)
    suspended = await config_service.list_suspended(owner_id=user.id)
    configs = active + suspended
    if not configs:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        return
    buttons = []
    for cfg in configs:
        title = cfg.display_name
        if cfg.suspended:
            title += " (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)"
        buttons.append(
            [InlineKeyboardButton(text=title, callback_data=f"cfg:{cfg.id}")]
        )
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=kb)


@router.message(Command("create_config"))
async def cmd_create_config(message: Message, state: FSMContext):
    await get_or_create_user(message.from_user.id, message.from_user.username)
    servers = await server_service.list()
    if not servers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        return
    buttons = [
        [
            InlineKeyboardButton(
                text=" ".join([s.location, s.name]), callback_data=f"server:{s.id}"
            )
        ]
        for s in servers
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ \u2014 10 —Ä—É–±–ª–µ–π (—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É). "
        "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 50 —Ä—É–±–ª–µ–π –∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.",
        reply_markup=kb,
    )
    await state.set_state(CreateConfig.choosing_server)


@router.callback_query(lambda c: c.data and c.data.startswith("server:"))
async def choose_server(callback: CallbackQuery, state: FSMContext):
    server_id = int(callback.data.split(":", 1)[1])
    await state.update_data(server_id=server_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    await state.set_state(CreateConfig.entering_name)
    await callback.answer()


@router.message(CreateConfig.entering_name)
async def got_name(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    server_id = data.get("server_id")
    if not server_id:
        await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    unique_name = uuid.uuid4().hex
    try:
        cfg = await billing_service.create_paid_config(
            server_id=server_id,
            owner_id=user.id,
            name=unique_name,
            display_name=message.text,
            creation_cost=settings.config_creation_cost,
        )
    except InsufficientBalanceError:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
        await state.clear()
        return
    except ServiceError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        return
    try:
        content = await config_service.download_config(cfg.id)
    except ServiceError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        return
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(content)
        tmp_path = tmp.name
    try:
        await bot.send_document(
            message.chat.id,
            FSInputFile(tmp_path, filename=f"{message.text}.ovpn"),
        )
    finally:
        try:
            os.remove(tmp_path)
        except OSError:
            pass
    await message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    await state.clear()


@router.callback_query(lambda c: c.data and c.data.startswith("cfg:"))
async def show_config(callback: CallbackQuery):
    config_id = int(callback.data.split(":", 1)[1])
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    server = await server_service.get(cfg.server_id)
    text = (
        f"<b>{cfg.display_name}</b>\n"
        f"–°–µ—Ä–≤–µ—Ä: {server.name} ({server.location})\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if cfg.suspended else '–∞–∫—Ç–∏–≤–Ω–∞'}"
    )
    buttons = []
    # if cfg.suspended:
    #     buttons.append([InlineKeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"uns:{cfg.id}")])
    # else:
    #     buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"sus:{cfg.id}")])
    buttons.append(
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{cfg.id}")]
    )
    buttons.append([InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", callback_data=f"dl:{cfg.id}")])
    buttons.append(
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rn:{cfg.id}")]
    )
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("sus:"))
async def suspend_config_cb(callback: CallbackQuery):
    config_id = int(callback.data.split(":", 1)[1])
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    try:
        await config_service.suspend_config(config_id)
        await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except ServiceError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("uns:"))
async def unsuspend_config_cb(callback: CallbackQuery):
    config_id = int(callback.data.split(":", 1)[1])
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    if user.balance <= 0:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
        await callback.answer()
        return
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    try:
        await config_service.unsuspend_config(config_id)
        await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except ServiceError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("del:"))
async def delete_config_cb(callback: CallbackQuery):
    config_id = int(callback.data.split(":", 1)[1])
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    try:
        await config_service.revoke_config(config_id)
        await callback.message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    except ServiceError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("dl:"))
async def download_config_cb(callback: CallbackQuery, bot: Bot):
    config_id = int(callback.data.split(":", 1)[1])
    user = await get_or_create_user(callback.from_user.id, callback.from_user.username)
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    try:
        content = await config_service.download_config(config_id)
    except ServiceError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await callback.answer()
        return
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(content)
        tmp_path = tmp.name
    try:
        await bot.send_document(
            callback.message.chat.id,
            FSInputFile(tmp_path, filename=f"{cfg.display_name}.ovpn"),
        )
    finally:
        try:
            os.remove(tmp_path)
        except OSError:
            pass
    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("rn:"))
async def rename_config_cb(callback: CallbackQuery, state: FSMContext):
    config_id = int(callback.data.split(":", 1)[1])
    await state.update_data(config_id=config_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    await state.set_state(RenameConfig.entering_name)
    await callback.answer()


@router.message(RenameConfig.entering_name)
async def got_new_name(message: Message, state: FSMContext):
    data = await state.get_data()
    config_id = data.get("config_id")
    if not config_id:
        await message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        await state.clear()
        return
    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    cfg = await config_service.get(config_id)
    if not cfg or cfg.owner_id != user.id:
        await message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    try:
        await config_service.rename_config(config_id, message.text)
        await message.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞")
    except ServiceError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await state.clear()
