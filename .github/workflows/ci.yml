name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        ENCRYPTION_KEY=enzRByUskrWIx5OhIPZx5Lul803FqBJ_UFFFVRUybsk=
        BOT_TOKEN=test_token
        PER_CONFIG_COST=0.07
        BILLING_INTERVAL=3600
        ADMIN_API_KEY=test_api_key
        EOF

    - name: Run database migrations
      run: |
        export $(cat .env.test | xargs)
        alembic upgrade head

    - name: Run tests with coverage
      run: |
        export $(cat .env.test | xargs)
        pytest tests/ -v --cov=core --cov=admin --cov=bot --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy

    - name: Run black
      run: black --check .

    - name: Run isort
      run: isort --check-only .

    - name: Run flake8
      run: flake8 .

    - name: Run mypy
      run: mypy . --ignore-missing-imports
